// Code generated by MockGen. DO NOT EDIT.
// Source: ./refresh_reader.go

// Package mock_conn is a generated GoMock package.
package mock_conn

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSetReadDeadlineReader is a mock of SetReadDeadlineReader interface.
type MockSetReadDeadlineReader struct {
	ctrl     *gomock.Controller
	recorder *MockSetReadDeadlineReaderMockRecorder
}

// MockSetReadDeadlineReaderMockRecorder is the mock recorder for MockSetReadDeadlineReader.
type MockSetReadDeadlineReaderMockRecorder struct {
	mock *MockSetReadDeadlineReader
}

// NewMockSetReadDeadlineReader creates a new mock instance.
func NewMockSetReadDeadlineReader(ctrl *gomock.Controller) *MockSetReadDeadlineReader {
	mock := &MockSetReadDeadlineReader{ctrl: ctrl}
	mock.recorder = &MockSetReadDeadlineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetReadDeadlineReader) EXPECT() *MockSetReadDeadlineReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSetReadDeadlineReader) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSetReadDeadlineReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSetReadDeadlineReader)(nil).Read), arg0)
}

// SetReadDeadline mocks base method.
func (m *MockSetReadDeadlineReader) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockSetReadDeadlineReaderMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockSetReadDeadlineReader)(nil).SetReadDeadline), arg0)
}
